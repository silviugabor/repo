buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:4.0.0'
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.1.0'
  }
}

group = 'io.reactivex.rxjava2'

description = 'RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM.'

apply plugin: 'java'
// apply plugin: 'pmd'  // disabled because runs out of memory on Travis
// apply plugin: 'findbugs'  // disabled because runs out of memory on Travis
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'nebula.rxjava-project'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'

    compile 'org.reactivestreams:reactive-streams:1.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.1.0'

    perfCompile 'org.openjdk.jmh:jmh-core:1.16'
    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.16'

    testCompile 'org.reactivestreams:reactive-streams-tck:1.0.0'
    testCompile group: 'org.testng', name: 'testng', version: '6.9.10'
}

javadoc {
    exclude "**/internal/**"
    exclude "**/test/**"
    exclude "**/perf/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption('top').value = ''
    options.addStringOption('doctitle').value = ''
    options.addStringOption('header').value = ''
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption('stylesheetfile', rootProject.file('./gradle/stylesheet.css').toString())
    }
}

animalsniffer {
    annotation = 'io.reactivex.internal.util.SuppressAnimalSniffer'
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}

test {
    
    testLogging  {
        // showing skipped occasionally should prevent CI timeout due to lack of standard output
        events=['skipped', 'failed'] // "started", "passed"
        // showStandardStreams = true
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"
        
        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }

    maxHeapSize = "1200m"

    if (System.getenv('CI') == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task testng(type: Test) { 
     useTestNG()
     testLogging  {
        events=['skipped', 'failed']
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"
        
        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
     }
} 

check.dependsOn testng 

jacoco {
    toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
}

task GCandMem(dependsOn: 'check') << {
    System.gc()
    Thread.sleep(200)
    print("Memory usage: ")
    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['io/reactivex/tck/**'])
        })
    }
}

jacocoTestReport.dependsOn GCandMem

build.dependsOn jacocoTestReport

// pmd {
//     toolVersion = '5.4.2'
//     ignoreFailures = true
//     sourceSets = [sourceSets.main]
//     ruleSets = []
//     ruleSetFiles = files('pmd.xml')
// }

// pmdMain {
//     reports {
//         html.enabled = true
//         xml.enabled = true
//     }
// }

// build.dependsOn pmdMain

// task pmdPrint(dependsOn: 'pmdMain') << {
//     File file = new File('build/reports/pmd/main.xml')
//     if (file.exists()) {

//         println("Listing first 100 PMD violations")

//         file.eachLine { line, count ->
//             if (count <= 100) {
//                println(line)
//             }
//         }

//     } else {
//         println("PMD file not found.")
//     }
// }

// build.dependsOn pmdPrint

checkstyle {
    configFile file('checkstyle.xml')
    ignoreFailures = true
    toolVersion ="6.19" 
}

/*
findbugs {
    ignoreFailures true
    toolVersion = '3.0.1'
    effort = 'max'
    reportLevel = 'low'
    sourceSets = [sourceSets.main]
}

findbugsMain {
    reports {
        html.enabled = false // Findbugs can only have on report enabled
        xml.enabled = true
    }
}
*/

// from https://discuss.gradle.org/t/maven-publish-plugin-generated-pom-making-dependency-scope-runtime/7494/10

publishing.publications.all {
  pom.withXml {
    asNode().dependencies.'*'.findAll() {
      it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each { it.scope*.value = 'compile'}

    asNode().developers.'*'.findAll() {
       it.id.text() == 'benjchristensen'
    } .each {
       it.id*.value = 'akarnokd'
       it.name*.value = 'David Karnok'
       it.email*.value = 'akarnokd@gmail.com'
    }
    
    asNode().properties.nebula_Module_Owner*.value = 'akarnokd@gmail.com'
    asNode().properties.nebula_Module_Email*.value = 'akarnokd@gmail.com'
  }
}
